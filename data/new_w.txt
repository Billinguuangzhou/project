See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/308038880 parallelnewhybrid : an R package for the parallelization of hybrid detection using NEWHYBRIDS
Some of the authors of this publication are also working on these related projects:
All content following this page was uploaded by Ian Bradbury on 27 September 2017.
S P E C I A L I S S U E : P O P U L A T I O N G E N O M I C S I N R parallelnewhybrid: an R package for the parallelization of hybrid detection using NEWHYBRIDS
BRENDAN F. WRINGE,* RYAN R. E. STANLEY,* NICHOLAS W. JEFFERY,* ERIC C. ANDERSON† and I A N R . B R A D B U R Y * *Fisheries and Oceans Canada, Salmonids Section, 80 East White Hills Road, St. John’s Newfoundland and Labrador, Canada A1C 5X1, †Fisheries Ecology Division, National Oceanic and Atmospheric Administration Southwest Fisheries Science Center, Santa Cruz, CA 95060, USA
Hybridization among populations and species is a central theme in many areas of biology, and the study of hybridization has direct applicability to testing hypotheses about evolution, speciation and genetic recombination, as well as having conservation, legal and regulatory implications. Yet, despite being a topic of considerable interest, the identiﬁcation of hybrid individuals, and quantiﬁcation of the (un)certainty surrounding the identiﬁcations, remains difﬁcult. Unlike other programs that exist to identify hybrids based on genotypic information, NEWHYBRIDS is able to assign individuals to speciﬁc hybrid classes (e.g. F 2) because it makes use of patterns of gene inheritance within each locus, rather than just the proportions of gene inheritance within each individual. For each comparison and set of markers, multiple independent runs of each data set should be used to develop an estimate of the hybrid class assignment accuracy. The necessity of analysing multiple simulated data sets, constructed from large genomewide data sets, presents signiﬁcant computational challenges. To address these challenges, we present parallelnewhybrid, an R package designed to decrease user burden when undertaking multiple NEWHYBRIDS analyses. hosting site GITHUB (www.github.com/bwringe/parallelnewhybrid).
Keywords: hybrid, introgression, NEWHYBRIDS, population genomics, population structure, R, software
Received 5 May 2016; revision received 29 August 2016; accepted 6 September 2016
Hybridization among closely related species, and genetically distinct populations of the same species, is a topic of broad interest to many ﬁelds of biology (Abbott et al. Hewitt 1985; Hilbish et al. 2012; Benson et al. 2014).
[(Abbott et al. 2013) but see (Barton 2013)]. The study of hybridization can also have conservation and legal and policy implications as it relates to the genetic structure and integrity of populations (Benson et al. 2014; Fitzpatrick et al. 2015), or introgression of domesticated (Kidd et al. 2009) or transgenic (Warwick et al. 2003) alleles into wild populations. However, despite the importance of understanding the dynamics of hybridization, the identiﬁcation of hybrids themselves can be difﬁcult, and ascertaining to which hybrid class (e.g. F1, F2, backcross) an individual belongs is more so.
Intuitively and of salience, the ease and precision with which hybridized individuals can be identiﬁed using genetic methods is inversely related to the degree of (genetic) relatedness between the groups which are (suspected of) hybridizing (Vaha & Primmer 2006).
2 B . F . W R I N G E E T A L .
However, in many cases, the degree of genetic differentiation among groups (e.g. within or among species) may be low, limiting the ability to evaluate hybridization and introgression within and among species. The identiﬁcation of hybrids and the ability to determine the presence, types and numbers of individuals of different hybrid classes can provide crucial information on the presence, magnitude and timescale over which introgression is occurring. While several statistical approaches [reviewed by (Anderson 2009; Payseur & Rieseberg 2016)] and software programs exist [e.g. tional demands.
Currently, the speed at which a complete NEWHYBRIDS analysis can be completed is limited by the fact that each analysis must be initiated separately and in sequence by
It has been previously shown that scripting not only allows tasks to be reliably distributed across the available cores, but can also immediately assign a new job to a free core as soon as a core has ﬁnished a process (Besnier & Glover 2013). Although such scripting is invariably more efﬁcient, specialized knowledge of the computer ﬁle structure and requisite programming language is required. Here, we describe an R (R Development Core Team 2015) package that takes advantage of the parallel computational capabilities inherent in modern computers to efﬁciently and automatically analyse lists of NEWHYBRIDS runs in parallel. We emphasize that we are not multi-threading the NEWHYBRIDS program to take advantage of multiple processors during a single run; any single run will still take just as long, but we are automating the procedure for performing multiple runs of the software in parallel. The R computing language already features many packages dedicated to the analysis and presentation of population genetics data (e.g. Goudet 2005; Paradis 2010; Jombart & Ahmed 2011). Thus, although the R language is likely to be familiar to many current and potential users of NEWHYBRIDS, our package is designed such that it should be readily usable by R novices.
Although NEWHYBRIDS does not natively support multithreading, it is possible to run independent NEWHYBRIDS analyses in parallel across all available cores. This process can, however, be tedious because NEWHYBRIDS does not have an option to change the name or location of the output ﬁles. Accordingly, to run NEWHYBRIDS in parallel, the user must perform each run in a separate directory so that the output of one instance of NEWHYBRIDS is not overwritten by the output of another instance. Doing this manually
P A R A L L E L I Z A T I O N O F H Y B R I D D E T E C T I O N I N R 3 command-line terminals (e.g. Microsoft command line, OS X Terminal) and execute NEWHYBRIDS with a speciﬁc set of parameters for each analysis folder. The status of each NEWHYBRIDS run must be individually monitored by the user, and when each analysis is completed, all the output ﬁles generated by NEWHYBRIDS must be renamed and combined for post-processing. Such manual monitoring and (re)implementation invariably creates CPU downtime and thus inefﬁciency because it is difﬁcult for the user to monitor the NEWHYBRIDS progress due to the extended duration of the analysis (many hours and potentially days). Furthermore, manually copying, moving and renaming ﬁles introduce the potential for human error.
Our package, parallelnewhybrid, is designed to address these issues: it implements the parallelization of multiple NEWHYBRIDS analyses, and also automatically compiles and renames the outputs of NEWHYBRIDS to reﬂect the ﬁle names of the data sets that were provided to it. Differences in computer operating system architecture mean that the manner in which tasks are distributed in Windows differs from OS X and LINUX. Consequently, in addition to an example data set, the package parallelnewhybrid is comprised of three operating system-speciﬁc functions to implement the parallelization of NEWHYBRIDS: parallelnh_WIN, parallelnh_OSX and parallelnh_LINUX. A further consequence of the manner in which parallelization is effected by R in Windows is that most parallelization packages, function correctly in graphic user interface (GUI) or embedded environment R sessions. While we have been successful in utilizing parallelnh_xx in the R GUI programs RStudio (RStudio Team 2015) and R CONSOLE (R Development Core Team 2015) in both OS X (OS X version 10.11.3, MACBOOK PRO, 2.3 GHz Intel Core i7, 16 GB RAM) and LINUX (Ubuntu version 14.04, Dell Precision Tower 7190, 2X 2.3 GHz Intel Xeon, 32 GB RAM), we have found running through the terminal to offer better stability. As such, we highly recommend that parallelnh_xx be run in the terminal by default. It may also be necessary to run R as root or administrator when invoking parallelnh_xx because some antivirus programs and tools may prevent the manipulation of the NEWHYBRIDS executable ﬁle.
SimPops_NH.txt is a simulated data set with genotypes at 240 loci for 200 individuals in each of the six genotype frequency classes (i.e. pure1, pure2, F1, F2, BC1 and BC2; Anderson & Thompson 2002) and is intended to be analysed in parallel using parallelnh_xx. The instructions for the user on how to copy the ﬁle from the R repository to another folder on the user’s hard drive and to prepare the ﬁle for parallel analysis are detailed in the README (https://github.com/bwringe/parallelnewhybrid).
We compared the time required to analyse eight simulated data sets, each comprised of 1200 individuals (200 individuals of each of the six genotype frequency classes), genotyped at 240 SNP loci using parallelnh_xx vs. a single-threaded (serial) implementation. In all cases, NEWHYBRIDS was run with an initial burn-in of 500 replicates, followed by 1000 sweeps (MCMC terminology of Anderson & Thompson 2002). While these numbers are lower than would be typically used in a real analysis, since time to completion scales linearly with the number of observed fold change improvements should be invariant to number of iterations. To implement the serial analysis, we restricted the multi-threading ability of parallelnh_xx such that it was limited to iteratively populating a single core. We acknowledge that this is likely an overestimate of the single core speed, as the script will invariably be faster than a human operator in initiating a new run as each ﬁnishes. We chose to analyse eight ﬁles on CPU architectures with eight virtual (four physical) cores (Intel Core i7; Samsung and MACBOOK PRO), while in the case of the Intel Xeon which has 24 virtual (12 physical) cores, scripting limited execution to a maximum of eight cores. We also examined how the time to complete the eight analyses scaled with the number of (virtual) cores available (1–8) to illustrate how differences in operating system and chip architecture inﬂuence the operation of our parallelization function.
Not surprisingly, even when the initiation of new runs was automated, the time to complete the analysis of the eight ﬁles was much slower without parallelization (Table 1). However, the relationship between improvement in computational speed and the number of cores made available was not linear (Table 2). This demonstrates that the ability to automatically distribute a list of analyses across multiple CPUs offers quantitative improvements over the native command-line implementation of NEWHYBRIDS. While always quicker than running analyses sequentially, we found that the computational time did not decrease linearly with the number of cores implemented in the analyses. This relationship was seen in each operating system (i.e. Windows, OS X, LINUX), and on the different CPU architectures (Intel Core i7, Intel Xeon), and has been reported elsewhere (Besnier & Glover 2013). Like Besnier & Glover (2013), we suggest this nonlinearity was not caused by parallelnh_xx, but
4 B . F . W R I N G E E T A L .
instead is a function of how the operating system and processor deals with the distribution and execution of computationally intensive processes (i.e. NEWHYBRIDS) along with (operating system speciﬁc) underlying system processes. Further, monitoring of system resources during each trial indicated that performance was not limited by the availability of random access memory (RAM), as additional RAM was always available during each simulation.
We acknowledge that functionality analogous to that offered by parallelnewhybrid could be achieved using scripting languages (e.g. bash scrip for Unix-like
Table 1 Comparison of the computational times required to complete the analysis of eight simulated data sets each with 1200 individuals genotyped at 240 loci using NEWHYBRIDS in series compared to in parallel using parallelnewhybrid using different operating systems and CPU architectures
†MacBook Pro, OS X 10.11, 2.3 GHz Intel Core i7 with 16 GB RAM. RAM. Intel Xeon with 32 GB RAM.
systems, shell script for Windows). However, we chose to use the R programming language because we feel it offers several beneﬁts that can help make the functionality offered by parallelnewhybrid accessible to and utilized by more people. These include an existing population genetic user base which may afford most potential users with greater familiarity and comfort with R than with scripting languages, as well as the infrastructure present within the R community for the archival and distribution of packages.
In summary, we have developed an R package that provides a substantial decrease in the time required to validate and conduct hybrid detection by enabling the parallelization of analyses using NEWHYBRIDS. Furthermore, because the time to complete analyses scales with the size of the data set provided (number of loci and individuals) and because running in parallel was always faster than in series, this package will enable the exploration of hybrid class assignment power and the utilization of larger data sets than previously feasible with NEWHYBRIDS. This should allow researchers conducting hybrid detection to generate more accurate posterior probability thresholds for identifying individual hybrid categories by examining the accuracy with which NEWHYBRIDS correctly identiﬁes the hybrid class of known individuals in replicated analyses of multiple simulated data sets. Furthermore, constructing and testing multiple simulated data sets is especially important when attempting to eliminate high-grading bias through the use of simulation and training data sets (Anderson 2010), when sample sizes are small and thus gene frequencies more prone to sampling-induced alteration, and when the genetic differentiation between populations is low (Vaha & Primmer 2006). Similarly, parallelnewhybrid will also
Table 2 Computational time required to analyse eight simulated data sets each with 1200 individuals genotyped at 240 loci. The analysis was repeated using different operating system and CPU architectures. CPU cores refer to the number of cores that the analysis could access simultaneously (i.e. number of parallel executions of NEWHYBRIDS). Fold improvement is calculated relative to the time taken to conduct the analysis using a single core, which itself is analogous to running the analysis in series
†MacBook Pro, OS X 10.11, 2.3 GHz Intel Core i7 with 16 GB RAM. ‡Samsung, Windows 10, 2.3 GHz Intel Core i7 with 12 GB RAM. §Dell Precision Tower 7190, Ubuntu version 14.04, 2X 2.3 GHz Intel Xeon with 32 GB RAM.
P A R A L L E L I Z A T I O N O F H Y B R I D D E T E C T I O N I N R 5 allow for larger data sets, both numbers of individuals and numbers of loci per individual, to be tested than are currently feasible, which may increase the ability for identiﬁcation of hybridization at ﬁne-scale levels of genetic differentiation.
The authors wish to thank Marion Sinclair-Waters and Mallory Van Wynegaarden for their help bug checking the code. We also thank Thierry Gosselin for encouraging us to publish this package. This work was supported by a Natural Sciences and Engineering Research Council Strategic project Grant and Fisheries and Oceans Canada funding (International Governance Strategy; Program for Aquaculture Regulatory Research; Genomics research and Development Initiative) to I.R.B.
Abbott R, Albach D, Ansell S et al. (2013) Hybridization and speciation.
Anderson EC (2003) User’s Guide to the Program NewHybrids Version 1.1 Beta. Department of Integrative Biology, University of California, Berkeley, Berkeley, California.
Anderson EC (2009) Statistical methods for identifying hybrids and groups. In: Population Genetics for Animal Conservation(eds Bertorelle G, Bruford MW, Hauff HC, Rizzoli A, Vernesi C), pp. 25–41. Cambridge University Press, New York.
Anderson EC (2010) Assessing the power of informative subsets of loci for population assignment: standard methods are upwardly biased. Molecular Ecology Resources, 10, 701–710.
Anderson EC, Thompson EA (2002) A model-based method for identifying species hybrids using multilocus genetic data. Genetics, 160, 1217– 1229.
Barton NH (2013) Does hybridization inﬂuence speciation? Journal of Evo-
Barton NH, Hewitt GM (1985) Analysis of hybrid zones. Annual Review of
Benson JF, Patterson BR, Mahoney PJ (2014) A protected area inﬂuences genotype-speciﬁc survival and the structure of a Canis hybrid zone. Ecology, 95, 254–264.
Besnier F, Glover KA (2013) ParallelStructure: a R package to distribute parallel runs of the population genetics program STRUCTURE on multi-core computers. PLoS One, 8, e70651.
R Development Core Team (2015) R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing, Vienna, Austria.
Fitzpatrick BM, Ryan ME, Johnson JR, Corush J, Carter ET (2015) Hybridization and the species problem in conservation. Current Zoology, 61, 206–216.
Goudet J (2005) HIERFSTAT, a package for R to compute and test hierar-
Hilbish TJ, Lima FP, Brannock PM et al. (2012) Change and stasis in marine hybrid zones in response to climate warming. Journal of Biogeography, 39, 676–687.
Hubisz MJ, Falush D, Stephens M, Pritchard JK (2009) Inferring weak population structure with the assistance of sample group information. Molecular Ecology Resources, 9, 1322–1332.
Jombart T, Ahmed I (2011) adegenet 1.3-1: new tools for the analysis of
Hybridization between escaped domestic and wild American mink (Neovison vison). Molecular Ecology, 18, 1175–1186.
Meirmans PG, Van Tienderen PH (2004) GENOTYPE and GENODIVE: two programs for the analysis of genetic diversity of asexual organisms. Molecular Ecology Notes, 4, 792–794.
Paradis E (2010) pegas: an R package for population genetics with an
Payseur BA, Rieseberg LH (2016) A genomic perspective on hybridiza-
RStudio Team (2015) RStudio: Integrated Development for R. RStudio, Inc.,
Todesco M, Pascual MA, Owens GL et al. (2016) Hybridization and
Vaha JP, Primmer CR (2006) Efﬁciency of model-based Bayesian methods for detecting hybrid individuals under different hybridization scenarios and with different numbers of loci. Molecular Ecology, 15, 63–72.
Warschefsky E, Penmetsa RV, Cook DR, von Wettberg EJB (2014) Back to the wilds: tapping evolutionary adaptations for resilient crops through systematic hybridization with crop wild relatives. American Journal of Botany, 101, 1791–1800.
Warwick SI, Simard MJ, Legere A et al. (2003) Hybridization between transgenic Brassica napus L. and its wild relatives: Brassica rapa L., Raphanus raphanistrum L., Sinapis arvensis L., and Erucastrum gallicum (Willd.) OE Schulz. Theoretical and Applied Genetics, 107, 528–539.
Wilson GA, Rannala B (2003) Bayesian inference of recent migration rates
B.F.W. wrote the manuscript and the package code and developed the supporting documentation and example data ﬁles hosted on GitHub. R.R.E.S., N.F.W., E.C.A. and I.R.B. all contributed to the initial concept, development of the code and associated documentation, as well as assisting in the writing of the manuscript.
The package, user manual, README and example data set are all available online from https://github.com/ bwringe/parallelnewhybrid.
